#!/usr/bin/python3 -uE
import socket as s
import struct
import sys
unit_test = False

# Available query commands and corresponding codes
# !!! This was generated by the function ptl.update_column_names_file() !!!
CMD_DICT = {
    "LineSize(bytes)": 0x0000000000000001,
    "LineNumber": 0x0000000000000002,
    "Time(secs)": 0x0000000000000004,
    "P2 Condense (Bar)": 0x0000000000000008,
    "P1 Tank (Bar)": 0x0000000000000010,
    "P5 ForepumpBack (Bar)": 0x0000000000000020,
    "P3 Still (mBar)": 0x0000000000000040,
    "P4 TurboBack (mBar)": 0x0000000000000080,
    "Dewar (mBar)": 0x0000000000000100,
    "Input Water Temp": 0x0000000000000200,
    "Output Water Temp": 0x0000000000000400,
    "Oil Temp": 0x0000000000000800,
    "Helium Temp": 0x0000000000001000,
    "Motor Current": 0x0000000000002000,
    "Low Pressure": 0x0000000000004000,
    "High Pressure": 0x0000000000008000,
    "PT2 Head T(K)": 0x0000000000010000,
    "PT2 Head R(Ohm)": 0x0000000000020000,
    "PT2 Plate T(K)": 0x0000000000040000,
    "PT2 Plate R(Ohm)": 0x0000000000080000,
    "Still Plate T(K)": 0x0000000000100000,
    "Still Plate R(Ohm)": 0x0000000000200000,
    "Cold Plate T(K)": 0x0000000000400000,
    "Cold Plate R(Ohm)": 0x0000000000800000,
    "MC Plate Cernox T(K)": 0x0000000001000000,
    "MC Plate Cernox R(Ohm)": 0x0000000002000000,
    "PT1 Head T(K)": 0x0000000004000000,
    "PT1 Head R(Ohm)": 0x0000000008000000,
    "PT1 Plate T(K)": 0x0000000010000000,
    "PT1 Plate R(Ohm)": 0x0000000020000000,
    "MC Plate RuO2 T(K)": 0x0000000040000000,
    "MC Plate RuO2 R(Ohm)": 0x0000000080000000,
    "Channel 9 T(K)": 0x0000000100000000,
    "Channel 9 R(Ohm)": 0x0000000200000000,
    "Channel 10 T(K)": 0x0000000400000000,
    "Channel 10 R(Ohm)": 0x0000000800000000,
    "Channel 11 T(K)": 0x0000001000000000,
    "Channel 11 R(Ohm)": 0x0000002000000000,
    "Channel 12 T(K)": 0x0000004000000000,
    "Channel 12 R(Ohm)": 0x0000008000000000,
    "Channel 13 T(K)": 0x0000010000000000,
    "Channel 13 R(Ohm)": 0x0000020000000000,
    "Still heater (W)": 0x0000040000000000,
    "chamber heater (W)": 0x0000080000000000,
    "IVC sorb heater (W)": 0x0000100000000000,
    "turbo current(A)": 0x0000200000000000,
    "turbo power(W)": 0x0000400000000000,
    "turbo speed(Hz)": 0x0000800000000000,
    "turbo motor(C)": 0x0001000000000000,
    "turbo bottom(C)": 0x0002000000000000
}

ALIAS_DICT = {
    "TEMP_MXC":		"MC Plate RuO2 T(K)",
    "TEMP_STILL":	"Still Plate T(K)",
    "TEMP_4K":		"PT2 Plate T(K)",
    "TEMP_50K":		"PT1 Plate T(K)",
	"PRES_P1":		"P1 Tank (Bar)",
	"PRES_P2":		"P2 Condense (Bar)",
	"PRES_P3":		"P3 Still (mBar)",
	"PRES_P4":		"P4 TurboBack (mBar)",
	"PRES_P5":		"P5 ForepumpBack (Bar)",
	"CHAMBER":		"Dewar (mBar)"
}

# Expected response length (in bytes) for any query
SEND_LEN = 8 # 64 bit values
RECV_LEN = 4 # 32 bit floats

# Server address
#ADDR = 'localhost' # For local testing
ADDR = '192.168.40.129'
PORT = 22127
TIMEOUT = 10.0 # s

# Socket class
class XLDClient:
    def __init__(self,server_addr,server_port):
        self.addr = server_addr
        self.port = server_port
        self.error_state = False
    
    # Send function
    def send_data(self,cmd):
        totalsent = 0
        while totalsent < SEND_LEN:
            sent = self.sock.send(cmd[totalsent:])
            if sent == 0:
                raise RuntimeError("Socket connection broken")
            totalsent = totalsent + sent
    
    # Receive function
    def recv_data(self):
        chunks = []
        bytes_recd = 0
        while bytes_recd < RECV_LEN:
            chunk = self.sock.recv(min(RECV_LEN - bytes_recd, 1024))
            if chunk == b'':
                raise RuntimeError("Socket connection broken")
            chunks.append(chunk)
            bytes_recd = bytes_recd + len(chunk)
        return b''.join(chunks)
    
    # Query function
    def query(self,query_cmd):
        
        # Error checking
        if query_cmd in CMD_DICT.keys():
            cmd = CMD_DICT[query_cmd]
        elif query_cmd in ALIAS_DICT.keys():
            cmd = CMD_DICT[ALIAS_DICT[query_cmd]]
        else:
            print ("[ERROR]: query(): Unrecognized command '%s'." % query_cmd)
            return None
        
        # Convert int to bytes
        cmd_bytes = cmd.to_bytes(SEND_LEN,sys.byteorder)
        #cmd_bytes = bytearray(struct.pack("Q",cmd))
        
        # Connect to the server
        try:
            self.sock = s.socket(s.AF_INET, s.SOCK_STREAM)
            self.sock.connect((self.addr, self.port))
            
            # Send the query
            self.send_data(cmd_bytes)
            
            # Receive the response
            ret = self.recv_data()
            
            # Close
            self.sock.close()
            
            # Structure the response into float
            return float(struct.unpack("f",ret)[0])
        except Exception as e:
            print ("[ERROR]: query(): Exception %s" % repr(e.args))
            return 0.0

if unit_test:
    # Send queries
    client = XLDClient(ADDR,PORT)
    keys = list(CMD_DICT.keys())
    for key in keys:
        val = client.query(key)
        print ("[%s]: %e" % (key,val))

